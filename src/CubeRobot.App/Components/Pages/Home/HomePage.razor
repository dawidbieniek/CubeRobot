@page "/"

@using CubeRobot.App.Components.Pages.Home.ProgressQueue;
@using CubeRobot.Models.RubiksCube
@using CubeRobot.Robot
@using CubeRobot.Robot.Communication
@using CubeRobot.Robot.Events
@using CubeRobot.Solvers

@inject NavigationManager Navigation

<NavBar Title="Panel sterowania robotem" Buttons="@([("Ustawienia robota", "settings/robot")])" ></NavBar>

<div class="container-fluid p-1 g-2">
    <div class="row g-2">
        <!-- Left Sidebar - cube configuration -->
        <div class="col-md-4">
            <div class="card mb-2">
                <div class="card-body">
                    <CubePreview Cube="_cube" />
                    <div class="form-group mt-2">
                        <label for="currentConfig">Układ kostki</label>
                        <textarea id="currentConfig" class="form-control font-monospace" readonly style="resize:none;">@_cube.ToString()</textarea>
                    </div>
                    <button @onclick="@(() => Navigation.NavigateTo("/cube-input"))" class="btn btn-primary mt-2">Wprowadź konfigurację kostki</button>
                </div>
            </div>
        </div>

        <!-- Right Content Area -->
        <div class="col-md-8">
            <!-- Settings Section -->
            <div class="card mb-2">
                <div class="card-body">
                    <div class="form-row row">
                        <div class="form-group col-md-6">
                            <AlgorithmSelector SelectionChanged="ChangeSelectedAlgorithm"/>
                        </div>
                        <div class="form-group col-md-6">
                            <SerialPortSelector SelectionChanged="ChangeSelectedPort" />
                        </div>
                    </div>
                    <div class="form-row row">
                        <div class="form-group col-md-6">
                            <label for="timeToFind">Czas znalezienia rozwiązania kostki</label>
                            <input type="text" readonly class="form-control" id="timeToFind" placeholder="to be done">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="timeToSolve">Czas ułożenia kostki</label>
                            <input type="text" readonly class="form-control" id="timeToSolve" placeholder="to be done">
                        </div>
                    </div>
                    <div class="form-row">
                        <CubeMoveProgressQueue @ref="_cubeMoveProgressQueue" Title="Pozostałe ruchy"/>
                    </div>
                    <div class="form-row">
                        <RobotMoveProgressQueue @ref="_robotMoveProgressQueue" Title="Pozostałe komendy"/>
                    </div>
                </div>
            </div>

            <!-- State Section -->
            <div class="card mb-2">
                <div class="card-body">                   
                    <RobotStateTable RotorStates="@_robotRotors" MoverStates="@_robotMovers"/>
                    <div class="d-flex align-items-center mt-2">
                        <h5>Stan robota:
                            <span class="badge rounded-pill bg-primary">@_robotState.GetDescriptor()</span>
                        </h5>
                        <div class="flex-grow-1"></div>
                        <RobotControllButtonPanel RobotState="Robot.CurrentState" OnNextStep="@NextRobotStep" OnSkipStep="@SkipRobotStep" /> @* TODO: Check if component get parameter update upon robot state change *@
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code 
{
    [Inject]
    public IRobot Robot { get; set; } = null!;

    [SupplyParameterFromQuery(Name = "cube")]
    public string StartingCubeConfiguration { get; set; } = string.Empty;

    [CascadingParameter]
    private IErrorDisplay ErrorDisplay { get; set; } = null!;

    private ICubeSolver Solver = new TwoPhaseSolver();
    private Cube _cube = new(3, true);

    private RobotMoveProgressQueue _robotMoveProgressQueue = null!; // Reference
    private CubeMoveProgressQueue _cubeMoveProgressQueue = null!; // Reference

    private RobotState _robotState = RobotState.Disconnected;
    private RotorState[] _robotRotors = Enumerable.Repeat(RotorState.Unknown, 4).ToArray();
    private MoverState[] _robotMovers = Enumerable.Repeat(MoverState.Unknown, 4).ToArray();

    protected override void OnInitialized()
    {
        Robot.RobotStateChanged += (s, e) => _robotState = e.CurrentState;
        Robot.MoveQueueChanged += (s, e) => InvokeAsync(() => OnRobotMoveQueueChanged(s, e));
        Robot.CommandQueueChanged += (s, e) => InvokeAsync(() => OnRobotCommandQueueChanged(s, e));
        Robot.RobotEffectorsStateChanged += (s, e) => InvokeAsync(() => OnRobotEffectorsStateChanged(s, e));
    }

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(StartingCubeConfiguration))
        {
            _cube = Cube.FromConfigurationString(StartingCubeConfiguration);
            // TODO: Error handling
        }
    }

    private void OnRobotMoveQueueChanged(object sender, MoveQueueEventArgs e)
    {
        if (e.FinishedMove is null)    // Queue initialization
            _cubeMoveProgressQueue.Initialize([.. e.RemainingMoves]);
        else
            _cubeMoveProgressQueue.AdvanceProgress();
    }

    private void OnRobotCommandQueueChanged(object sender, CommandQueueEventArgs e)
    {
        if (e.FinishedCommands.Count() == 0)    // Queue initialization
            _robotMoveProgressQueue.Initialize([.. e.RemainingCommands]);
        else
        {
            _robotMoveProgressQueue.AdvanceProgress(e.FinishedCommands.Count());
            System.Diagnostics.Debug.WriteLine($"Removing from queue '{e.FinishedCommands.ToProtocolString()}'");
            System.Diagnostics.Debug.WriteLine($"Remaining '{e.RemainingCommands.ToProtocolString()}'");
        }
    }

    private void OnRobotEffectorsStateChanged(object sender, RobotEffectorsEventArgs e)
    {
        _robotRotors = e.RotorStates;
        _robotMovers = e.MoverStates;

        StateHasChanged();
    }

    private void ChangeSelectedPort(string portName)
    {
        if (portName == "Brak")
            return;
        Robot.ConfigureCommunicationChannel(new SerialPortCommunication(portName));
    }

    private void ChangeSelectedAlgorithm(CubeSolvingAlgorithm algorithm)
    {
        Solver = algorithm.Solver();
    }

    private async Task NextRobotStep()
    {
        if(Robot.CurrentState == RobotState.NoCube)
        {
            IEnumerable<CubeMove> moveQueue = [.. (await Task.Run(() => Solver.SolveCube(_cube)))];
            Robot.SolveCube(moveQueue);
            return;
        }
    }

    private void SkipRobotStep()
    {
        
    }

}

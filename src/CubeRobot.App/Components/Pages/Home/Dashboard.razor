@page "/"

@using CubeRobot.App.Components.Pages.Home.CubePreview
@using CubeRobot.App.Components.Pages.Home.ProgressQueue;
@using CubeRobot.Models.RubiksCube
@using CubeRobot.Robot
@using CubeRobot.Robot.Communication
@using CubeRobot.Robot.Events
@using CubeRobot.Solvers

@* <NavBar Title="CubeRobot panel sterowania" Buttons="@([("RobotSettings", "settings/robot")])" ></NavBar> *@

<div class="container-fluid mt-4">
    <div class="row">
        <!-- Left Sidebar - cube configuration -->
        <div class="col-md-4">
            <div class="card mb-4">
                <div class="card-body">
                    @* <CubePreview Cube="_cube" /> *@
                    <div class="form-group mt-2">
                        <label for="currentConfig">Układ kostki</label>
                        <textarea id="currentConfig" class="form-control" readonly style="resize:none;font-family:monospace">@_cube.ToString()</textarea>
                    </div>
                    <button class="btn btn-primary mt-2">Wprowadź konfigurację kostki</button>
                </div>
            </div>
        </div>

        <!-- Right Content Area -->
        <div class="col-md-8">
            <!-- Settings Section -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="form-row row">
                        <div class="form-group col-md-6">
                            <AlgorithmSelector SelectionChanged="ChangeSelectedAlgorithm"/>
                        </div>
                        <div class="form-group col-md-6">
                            <SerialPortSelector SelectionChanged="ChangeSelectedPort" />
                        </div>
                    </div>
                    <div class="form-row row">
                        <div class="form-group col-md-6">
                            <label for="timeToFind">Czas znalezienia rozwiązania kostki</label>
                            <input type="text" readonly class="form-control" id="timeToFind" placeholder="0.00s">
                        </div>
                        <div class="form-group col-md-6">
                            <label for="timeToSolve">Czas ułożenia kostki</label>
                            <input type="text" readonly class="form-control" id="timeToSolve" placeholder="0.00s">
                        </div>
                    </div>
                    <div class="form-row">
                        <CubeMoveProgressQueue @ref="_cubeMoveProgressQueue" Title="Pozostałe ruchy" Queue="_moveQueue" />
                    </div>
                    <div class="form-row">
                        <RobotMoveProgressQueue @ref="_robotMoveProgressQueue" Title="Pozostałe komendy" Queue="_commandQueue"/>
                    </div>
                </div>
            </div>

            <!-- State Section -->
            <div class="card mb-4">
                <div class="card-body">
                    <p class="mb-2">Current Robot State: Idle</p>
                    <table class="table">
                        <thead>
                            <tr>
                                <th scope="col">Position</th>
                                <th scope="col">Arm State</th>
                                <th scope="col">Rotor State</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Front</td>
                                <td>Arm 1 State</td>
                                <td>Rotor 1 State</td>
                            </tr>
                            <tr>
                                <td>Left</td>
                                <td>Arm 2 State</td>
                                <td>Rotor 2 State</td>
                            </tr>
                            <tr>
                                <td>Right</td>
                                <td>Arm 3 State</td>
                                <td>Rotor 3 State</td>
                            </tr>
                            <tr>
                                <td>Back</td>
                                <td>Arm 4 State</td>
                                <td>Rotor 4 State</td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="d-flex justify-content-end mt-3">
                        <button type="button" class="btn btn-primary mr-2">Proceed to Next State</button>
                        <button type="button" class="btn btn-secondary">Skip Current State</button>
                    </div>
                </div>
            </div>

            <!-- Error Display Section -->
            <div class="alert alert-danger" role="alert">
                Error: Connection lost. Please reconnect.
            </div>
        </div>
    </div>
</div>

@code 
{
    [Inject]
    public IRobot Robot { get; set; } = null!;

    private ICubeSolver Solver = new TwoPhaseSolver();
    private Cube _cube = new(3, true);

    private List<RobotMove> _commandQueue = [];
    private RobotMoveProgressQueue _robotMoveProgressQueue = null!; // Reference
    private List<CubeMove> _moveQueue = [];
    private CubeMoveProgressQueue _cubeMoveProgressQueue = null!; // Reference

    protected override void OnInitialized()
    {
        Robot.MoveQueueChanged += OnRobotMoveQueueChanged;
    }

    private void OnRobotMoveQueueChanged(object sender, MoveQueueEventArgs e)
    {
        if (e.FinishedMove is null)
            _moveQueue = [.. e.RemainingMoves];
        else
            _robotMoveProgressQueue.AdvanceProgress();
    }

    private void OnRobotCommandQueueChanged(object sender, CommandQueueEventArgs e)
    {
        if (e.FinishedCommands.Count() == 0)
            _commandQueue = [.. e.RemainingCommands];
        else
            _robotMoveProgressQueue.AdvanceProgress(e.RemainingCommands.Count());
    }

    private void ChangeSelectedPort(string portName)
    {
        Robot.ConfigureCommunicationChannel(new SerialPortCommunication(portName));
    }

    private void ChangeSelectedAlgorithm(CubeSolvingAlgorithm algorithm)
    {
        Solver = algorithm.Solver();
    }

}

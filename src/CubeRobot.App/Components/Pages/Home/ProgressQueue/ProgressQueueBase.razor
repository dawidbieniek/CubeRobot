@using System.Text
@typeparam T where T : notnull

<div class="form-group col-md-12">
    <label for="@this.GetHashCode()">@Title</label>
    <div class="progress">
        @if(MaxProgress > 0)
        {
            string progressWidthText = ProgressPercent.ToString("F2", System.Globalization.CultureInfo.InvariantCulture);
            string animationClass = Progress < MaxProgress ? "progress-bar-animated" : "";
            string classes = $"overflow-visible progress-bar progress-bar-striped {animationClass}";
            <div class="@classes" style="width: @(progressWidthText)%;">@Progress / @MaxProgress</div>
        }
    </div>
    <input id="@this.GetHashCode()" type="text" readonly class="form-control mt-1" placeholder="@Text">
</div>

@code 
{
    [Parameter]
    public string Title { get; set; } = string.Empty;

    protected List<T> Queue { get; private set; } = null!;
    protected string Text { get; set; } = string.Empty;
    protected int Progress { get; set; } = 0;
    protected int MaxProgress { get; set; } = 0;
    protected double ProgressPercent => 100D * Progress / MaxProgress;

    public void Initialize(List<T> queue)
    {
        Queue = queue;

        MaxProgress = queue.Count;
        Progress = 0;
        UpdateText();

        StateHasChanged();
    }

    public void AdvanceProgress(int progressChange = 1)
    {
        if (Queue is null)
            throw new InvalidOperationException($"{GetType().Name} must be first initialized");

        if (Progress >= MaxProgress || progressChange <= 0)
            return;

        Progress += progressChange;
        if (progressChange == 1)
            Queue.RemoveAt(0);
        else
            Queue.RemoveRange(0, progressChange);

        UpdateText();

        StateHasChanged();
    }

    protected virtual void UpdateText()
    {
        StringBuilder sb = new();

        foreach (T item in Queue)
        {
            sb.Append(item.ToString());
            sb.Append(' ');
        }

        Text = sb.ToString();
    }
}

@using BlazorSortableList
@using CubeRobot.App.Components.Pages.CubeInput.ImageDrop

<div class="row mt-2">
    @* Upload button *@
    <InputFile OnChange="UploadFiles" multiple accept="image/*"></InputFile>
 </div>
<div class="row-parent">
    <SortableList Id="@_group.UploadListId" GroupModel="_group" T="ImageFile" Style="min-height:100px; background-color:lightgray; border-radius:5px; overflow:hidden;">
        <SortableItemTemplate>
            <div class="col-md-2">
                <div class="card">
                    <div class="card-header">
                        @context.FileName
                        <button @onclick="() => RemoveImage(context)" class="btn-close position-absolute end-0  " style="top:8px !important;"></button>
                    </div>
                    <img src="@context.Preview" class="card-img-bottom" alt="@context.FileName" />
                </div>
            </div>
        </SortableItemTemplate>
    </SortableList>
</div>

<div class="row mt-2">
    <div class="col-md-6">
        <ImageDropCubeNet Group="_group"  />
    </div>
</div>


@code
{
    private const int MaxFileNameLength = 12;
    private const int MaxFileCount = 12;

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = null!;

    [CascadingParameter]
    private IErrorDisplay ErrorDisplay { get; set; } = null!;

    private CubeSortableListGroup _group = null!;

    private List<ImageFile> _uploadedImages = [];

    protected override void OnInitialized()
    {
        _group = new(() => StateHasChanged(), _uploadedImages);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("replaceParentPlaceholderContainer", "row-parent", "row mx-0 mt-2 p-1");
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            foreach (IBrowserFile file in e.GetMultipleFiles(MaxFileCount))
            {
                if (_uploadedImages.Count >= MaxFileCount)
                {
                    ErrorDisplay.AddErrors($"Can't upload more than {MaxFileCount} files");
                    return;
                }
                if (!file.ContentType.StartsWith("image"))
                {
                    ErrorDisplay.AddErrors($"Unsupported file type: {file.ContentType}");
                    return;
                }

                ImageFile image = new(ShortenFileName(file.Name), await LoadImagePreview(file));
                _uploadedImages.Add(image);
            }
        }
        catch (InvalidOperationException)
        {
            ErrorDisplay.AddErrors($"Can't upload more than {MaxFileCount} files");
        }

    }

    private string ShortenFileName(string fileName)
    {
        string nameWithoutExtension = fileName.Split('.')[0];
        return nameWithoutExtension[0..Math.Min(nameWithoutExtension.Length, MaxFileNameLength)];
    }

    private async Task<string> LoadImagePreview(IBrowserFile file)
    {
        byte[] buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        string imageDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        return imageDataUrl;
    }

    private void RemoveImage(ImageFile image)
    {
        _uploadedImages.Remove(image);
    }

    private void ShowUploadDialog()
    {

    }
}
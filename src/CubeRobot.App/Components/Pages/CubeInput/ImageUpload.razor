<style>
    .dropper {
        --sticker-size: 40px;
        --face-size: calc(var(--sticker-size) * 3);
        display: grid;
        grid-template-columns: repeat(4, var(--face-size));
        grid-template-rows: repeat(3, var(--face-size));
        width: calc(4*var(--face-size));
        height: calc(3*var(--face-size));
    }

        .dropper div {
            border: 4px solid magenta;
        }

        .dropper > :first-child {
            grid-column-start: 2;
        }

        .dropper > :nth-child(2) {
            grid-column-start: 1;
        }

        .dropper > :last-child {
            grid-column-start: 2;
        }
</style>

<div class="row mt-3">
    @foreach (ImageFile image in _uploadedImages)
    {
        <div class="col-md-2">
            <div class="card">
                <div class="card-header">
                    @image.FileName
                    <button @onclick="() => RemoveImage(image)" class="btn-close position-absolute end-0" style="top:8px !important;"></button>
                </div>
                <img src="@image.Preview" class="card-img-bottom" alt="@image.FileName" />
            </div>
        </div>
    }
    @* Upload button *@
    @if (_uploadedImages.Count < MaxFileCount)
    {
        <div class="col-md-2">
            <div class="card">
                <InputFile OnChange="UploadFiles" multiple accept="image/*"></InputFile>
            </div>
        </div>
    }
</div>
<div class="row">
    <div class="dropper">
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
    </div>
</div>

@code
{
    private const int MaxFileNameLength = 12;
    private const int MaxFileCount = 12;

    [CascadingParameter]
    private IErrorDisplay ErrorDisplay { get; set; } = null!;

    private List<ImageFile> _uploadedImages = [];

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            foreach (IBrowserFile file in e.GetMultipleFiles(MaxFileCount))
            {
                if (_uploadedImages.Count >= MaxFileCount)
                {
                    ErrorDisplay.AddErrors($"Can't upload more than {MaxFileCount} files");
                    return;
                }
                if (!file.ContentType.StartsWith("image"))
                {
                    ErrorDisplay.AddErrors($"Unsupported file type: {file.ContentType}");
                    return;
                }

                ImageFile image = new(ShortenFileName(file.Name), await LoadImagePreview(file));
                _uploadedImages.Add(image);
            }
        }
        catch (InvalidOperationException)
        {
            ErrorDisplay.AddErrors($"Can't upload more than {MaxFileCount} files");
        }

    }

    private string ShortenFileName(string fileName)
    {
        string nameWithoutExtension = fileName.Split('.')[0];
        return nameWithoutExtension[0..Math.Min(nameWithoutExtension.Length, MaxFileNameLength)];
    }

    private async Task<string> LoadImagePreview(IBrowserFile file)
    {
        byte[] buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        string imageDataUrl = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        return imageDataUrl;
    }

    private void RemoveImage(ImageFile image)
    {
        _uploadedImages.Remove(image);
    }

    private void ShowUploadDialog()
    {

    }

    private record ImageFile(string FileName, string Preview);
}
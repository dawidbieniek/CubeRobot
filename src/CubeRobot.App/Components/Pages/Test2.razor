@page "/settings/robot"
@using CubeRobot.CV
@using CubeRobot.Models.RubiksCube

<div class="row">
    <InputFile OnChange="UploadImage" accept="image/*"></InputFile>
</div>
<div class="row">
    <div class="col">
        @if(!string.IsNullOrEmpty(_imagePreview))
        {
            <img src="@_imagePreview" class="w-100 h-100"/>
        }
    </div>
    <div class="col">
        @if (!string.IsNullOrEmpty(_matPreview))
        {
            <img src="@_matPreview" class="w-100 h-100" />
        }
    </div>
    <div class="col">
        @for(int i = 0; i < _imageFragments.GetLength(0); i++)
        {
            <div class="row">
                @for (int j = 0; j < _imageFragments.GetLength(1); j++)
                {
                    <div class="col">
                        <img src="@_imageFragments[i,j]" class="w-100 h-100" />
                    </div>
                }
            </div>
        }
        @for (int i = 0; i < _faceColors.GetLength(0); i++)
        {
            <div class="row">
                @for (int j = 0; j < _faceColors.GetLength(1); j++)
                {
                    <div class="col">
                        <h3>@_faceColors[i,j]</h3>
                    </div>
                }
            </div>
        }
    </div>
</div>
<div class="row">
    <button @onclick="() => ProcessImage()" class="btn btn-primary">Process</button>
</div>

@code 
{
    private byte[] _imageData = [];
    private string _fileType = "image/png";

    private string _imagePreview = string.Empty;
    private string _matPreview = string.Empty;

    private string[,] _imageFragments = new string[0, 0];
    private CubeFaceColor[,] _faceColors = new CubeFaceColor[0, 0];


    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        IBrowserFile? file = e.GetMultipleFiles().FirstOrDefault();

        if (file is null)
        {
            return;
        }

        byte[] imageData = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(imageData);
        _imageData = imageData;
        _fileType = file.ContentType.ToString();

        _imagePreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageData)}";
    }

    private void ProcessImage()
    {
        byte[] matData = PhotoAnalyzer.ProcessCubeImage(_imageData, out byte[,][] imageFragmentsData, out _faceColors);
        _matPreview = $"data:{_fileType};base64,{Convert.ToBase64String(matData)}";

        _imageFragments = new string[imageFragmentsData.GetLength(0), imageFragmentsData.GetLength(1)];
        for (int i = 0; i < imageFragmentsData.GetLength(0); i++)
            for (int j = 0; j < imageFragmentsData.GetLength(1); j++)
                _imageFragments[i, j] = $"data:{_fileType};base64,{Convert.ToBase64String(imageFragmentsData[i, j])}";
    }

}
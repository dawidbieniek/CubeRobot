@page "/settings/robot/2"
@using CubeRobot.CV

<div class="row">
    <InputFile OnChange="UploadImage" accept="image/*"></InputFile>
</div>
<div class="row">
    <div class="col-3">
        @if(!string.IsNullOrEmpty(_imagePreview))
        {
            <img src="@_imagePreview" class="w-100 h-100"/>
        }
    </div>
    <div class="col-3">
        @if (!string.IsNullOrEmpty(_matPreview))
        {
            <img src="@_matPreview" class="w-100 h-100" />
        }
    </div>
    <div class="col-2">
        @if (!string.IsNullOrEmpty(_thPreview))
        {
            <img src="@_thPreview" class="w-100 h-100" />
        }
    </div>
    <div class="col-1">
        <button @onclick="() => ProcessImage()" class="btn btn-primary">Process</button>
    </div>
</div>
<div class="row">
    <div class="col">
        Min threshold
        <input type="range" min="0" max="255" @bind-value="_minThreshold"></input>
        Max threshold
        <input type="range" min="0" max="255" @bind-value="_maxThreshold"></input>
        Min color
        <input type="range" min="0" max="255" @bind-value="_minColor"></input>
        Max color
        <input type="range" min="0" max="255" @bind-value="_maxColor"></input>
        Min area
        <input type="range" min="1" max="10000" @bind-value="_minArea"></input>
        Max area
        <input type="range" min="1" max="10000" @bind-value="_maxArea"></input>
        <br/>
        Gray
        <input type="checkbox" class="form-check" @bind-value="_gray" />
        Gaussian blur
        <input type="checkbox" class="form-check" @bind-value="_gauss" />
    </div>
</div>

@code 
{
    private byte[] _imageData = [];
    private string _fileType = "image/png";

    private string _imagePreview = string.Empty;
    private string _matPreview = string.Empty;
    private string _thPreview = string.Empty;

    private int _minThreshold = 0;
    private int _maxThreshold = 100;
    private int _minColor = 0;
    private int _maxColor = 100;
    private int _minArea = 200;
    private int _maxArea = 5000;
    private bool _gray = false;
    private bool _gauss = false;


    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        IBrowserFile? file = e.GetMultipleFiles().FirstOrDefault();


        if (file is null)
        {
            return;
        }

        byte[] imageData = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(imageData);
        _imageData = imageData;
        _fileType = file.ContentType.ToString();

        _imagePreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(imageData)}";
    }

    private void ProcessImage()
    {
        // byte[] matData = PhotoAnalyzer.TestPhoto(_imageData, _gray, _gauss, _minThreshold, _maxThreshold, _minArea, _maxArea);
        // _matPreview = $"data:{_fileType};base64,{Convert.ToBase64String(matData)}";

        // byte[] thData = PhotoAnalyzer.DetectRedColor(_imageData, _minColor, _maxColor);
        // _thPreview = $"data:{_fileType};base64,{Convert.ToBase64String(thData)}";

    }

}